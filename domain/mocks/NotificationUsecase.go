// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/bxcodec/go-clean-arch/domain"
	mock "github.com/stretchr/testify/mock"
)

// NotificationUsecase is an autogenerated mock type for the NotificationUsecase type
type NotificationUsecase struct {
	mock.Mock
}

// GetListNotification provides a mock function with given fields: ctx
func (_m *NotificationUsecase) GetListNotification(ctx context.Context) ([]*domain.NotificationData, error) {
	ret := _m.Called(ctx)

	var r0 []*domain.NotificationData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*domain.NotificationData, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*domain.NotificationData); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.NotificationData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSingleNotification provides a mock function with given fields: ctx, id
func (_m *NotificationUsecase) GetSingleNotification(ctx context.Context, id int64) (*domain.NotificationData, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.NotificationData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*domain.NotificationData, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *domain.NotificationData); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.NotificationData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewNotificationUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewNotificationUsecase creates a new instance of NotificationUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNotificationUsecase(t mockConstructorTestingTNewNotificationUsecase) *NotificationUsecase {
	mock := &NotificationUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
